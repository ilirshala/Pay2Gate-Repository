{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\pay2gate\\\\src\\\\Components\\\\Shared\\\\Select.jsx\",\n    _s = $RefreshSig$();\n\nimport { ArrowDropDown, ArrowDropUp } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport PropTypes from \"prop-types\";\nimport \"./Styles/Select.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Select = /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const [openDropdown, setOpenDropdown] = useState(false);\n  const selected = props.selected || null;\n  const clonedChildren = [];\n  props.children.forEach(child => {\n    clonedChildren.push( /*#__PURE__*/React.cloneElement(child, {\n      onClick: () => {\n        if (selected && selected.value !== child.props.value) props.handleChange({\n          value: child.props.value,\n          label: child.props.label\n        });\n        setOpenDropdown(false);\n      },\n      className: `select-option ${child.props.className} ${child.props.value === selected.value ? \"selected-option\" : \"\"}`,\n      key: child.props.value\n    }));\n  });\n\n  let arrow = /*#__PURE__*/_jsxDEV(ArrowDropDown, {\n    className: \"arrow\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 15\n  }, this);\n\n  if (props.styles === \"drop-up\") arrow = /*#__PURE__*/_jsxDEV(ArrowDropUp, {\n    className: \"arrow\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 43\n  }, this);\n  return /*#__PURE__*/_jsxDEV(OutsideClickHandler, {\n    onOutsideClick: setOpenDropdown.bind(null, false),\n    disabled: !openDropdown,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `select  ${props.styles ? props.styles : \"\"} ${openDropdown ? \"show\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"aria-hidden\": true,\n        className: \"selected\",\n        onClick: () => {\n          if (openDropdown) setOpenDropdown(false);else setOpenDropdown(true);\n        },\n        children: [props.icon, selected.label ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this) : props.category, \" \", arrow]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-dropdown\",\n        children: [props.category && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category select-option\",\n          children: props.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 30\n        }, this), clonedChildren]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}, \"p4yJnyUnoZ8HmNTRUoa99Wdp2/s=\"));\n_c2 = Select;\nexport default Select;\nSelect.propTypes = {\n  category: PropTypes.string,\n  styles: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n  icon: PropTypes.element\n}; // props:\n// styles: drop-up for dropdown appear on top\n// children should have label and value\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Select$React.memo\");\n$RefreshReg$(_c2, \"Select\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Desktop/pay2gate/src/Components/Shared/Select.jsx"],"names":["ArrowDropDown","ArrowDropUp","React","useState","OutsideClickHandler","PropTypes","Select","memo","props","openDropdown","setOpenDropdown","selected","clonedChildren","children","forEach","child","push","cloneElement","onClick","value","handleChange","label","className","key","arrow","styles","bind","icon","category","propTypes","string","func","isRequired","element"],"mappings":"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","sourcesContent":["import { ArrowDropDown, ArrowDropUp } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport PropTypes from \"prop-types\";\nimport \"./Styles/Select.scss\";\nconst Select = React.memo((props) => {\n  const [openDropdown, setOpenDropdown] = useState(false);\n  const selected = props.selected || null;\n  const clonedChildren = [];\n  props.children.forEach((child) => {\n    clonedChildren.push(\n      React.cloneElement(child, {\n        onClick: () => {\n          if (selected && selected.value !== child.props.value)\n            props.handleChange({\n              value: child.props.value,\n              label: child.props.label,\n            });\n\n          setOpenDropdown(false);\n        },\n        className: `select-option ${child.props.className} ${child.props.value === selected.value ? \"selected-option\" : \"\"}`,\n        key: child.props.value,\n      })\n    );\n  });\n  let arrow = <ArrowDropDown className=\"arrow\" />;\n  if (props.styles === \"drop-up\") arrow = <ArrowDropUp className=\"arrow\" />;\n  return (\n    <OutsideClickHandler onOutsideClick={setOpenDropdown.bind(null, false)} disabled={!openDropdown}>\n      <div className={`select  ${props.styles ? props.styles : \"\"} ${openDropdown ? \"show\" : \"\"}`}>\n        <div\n          aria-hidden\n          className=\"selected\"\n          onClick={() => {\n            if (openDropdown) setOpenDropdown(false);\n            else setOpenDropdown(true);\n          }}\n        >\n          {props.icon}\n          {selected.label ? <span>{selected.label}</span> : props.category} {arrow}\n        </div>\n\n        <div className=\"select-dropdown\">\n          {props.category && <div className=\"category select-option\">{props.category}</div>}\n          {clonedChildren}\n        </div>\n      </div>\n    </OutsideClickHandler>\n  );\n});\n\nexport default Select;\n\nSelect.propTypes = {\n  category: PropTypes.string,\n  styles: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n  icon: PropTypes.element,\n};\n// props:\n\n// styles: drop-up for dropdown appear on top\n\n// children should have label and value\n"]},"metadata":{},"sourceType":"module"}